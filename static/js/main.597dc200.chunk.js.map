{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fileSize","excludes","x","Math","floor","random","y","some","item","initFields","fieldSize","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionkeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibilitiy","className","onClick","Field","map","row","column","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","unsubscribe","clearInterval","useSnakeGame","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","positon","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.597dc200.chunk.js","sourcesContent":["\n\nexport const getFoodPosition = (fileSize, excludes) => {\n    while (true) {\n        const x = Math.floor(Math.random() * (fileSize - 1 - 1)) + 1;\n        const y = Math.floor(Math.random() * (fileSize - 1 - 1)) + 1;\n        const conflict = excludes.some(item => item.x === x && item.y === y)\n\n        if (!conflict) {\n            return { x, y };\n        }\n    }\n}\nexport const initFields = (fieldSize, snake,) => {\n    const fields = []\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill('')\n        fields.push(cols)\n    }\n    fields[snake.y][snake.x] = 'snake'\n\n    const food = getFoodPosition(fieldSize, [snake])\n    fields[food.y][food.x] = 'food'\n\n    return fields\n}\n\nexport const isCollision = (fieldSize, positon) => {\n    if (positon.y < 0 || positon.x < 0) {\n        return true;\n    }\n    if (positon.y > fieldSize - 1 || positon.x > fieldSize - 1) {\n        return true;\n    }\n    return false;\n};\n\nexport const isEatingMyself = (fields, positon) => {\n    return fields[positon.y][positon.x] === 'snake'\n}","import { initFields } from \"../utils\";\n\nconst fieldSize = 35;\nexport const initialPosition = { x: 17, y: 17 }\nexport const initialValues = initFields(fieldSize, initialPosition)\nexport const defaultInterval = 100\nexport const defaultDifficulty = 3\n\nexport const Difficulty = [1000, 500, 100, 50, 10]\n\nexport const GameStatus = Object.freeze({\n    init: 'init',\n    playing: 'playing',\n    suspended: 'suspended',\n    gameover: 'gameover'\n})\n\n\nexport const Direction = Object.freeze({\n    up: 'up',\n    right: 'right',\n    left: 'left',\n    down: 'down',\n})\n\nexport const DirectionkeyCodeMap = Object.freeze({\n    37: Direction.left,\n    38: Direction.up,\n    39: Direction.right,\n    40: Direction.down\n})\n\nexport const OppositeDirection = Object.freeze({\n    up: 'down',\n    right: 'left',\n    left: 'right',\n    down: 'up',\n})\n\nexport const Delta = Object.freeze({\n    up: { x: 0, y: -1 },\n    right: { x: 1, y: 0 },\n    left: { x: -1, y: 0 },\n    down: { x: 0, y: 1 }\n})","import { defaultDifficulty, Difficulty } from \"../constants\";\n\nconst Navigation = ({ length, difficulty = defaultDifficulty, onChangeDifficulty }) => {\n    const upVisibility = difficulty < Difficulty.length ? '' : 'is-hidden'\n    const downVisibilitiy = difficulty > 1 ? '' : 'is-hidden'\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1)\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Length:</span>\n                <div className=\"navigation-item-number-cotainer\">\n                    <div className=\"num-board\">{length}</div>\n                </div>\n            </div>\n            <div className=\"navigation-item\">\n                <span className=\"navigation-lable\">Difficulty:</span>\n                <div className=\"navigation-item-number-container\">\n                    <span className=\"num-board\">{difficulty}</span>\n                    <div className=\"difficulty-button-container\">\n                        <div\n                            className={`difficulty-button difficulty-up${upVisibility}`}\n                            onClick={onUpDifficulty}></div>\n                        <div\n                            className={`difficulty-button difficulty-down${downVisibilitiy}`}\n                            onClick={onDownDifficulty}\n                        ></div>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Navigation;","const Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n            }\n        </div>\n    )\n}\n\nexport default Field;","import { GameStatus } from \"../constants\";\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n    return (\n        <div className=\"button\">\n            {status === GameStatus.gameover && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n            {status === GameStatus.init && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n            {status === GameStatus.suspended && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n            {status === GameStatus.playing && < button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n        </div >\n    );\n};\n\nexport default Button;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faArrowLeft,\n    faArrowUp,\n    faArrowDown,\n    faArrowRight\n} from '@fortawesome/free-solid-svg-icons'\nimport { Direction } from \"../constants\";\n\nconst ManipulationPanel = ({ onChange }) => {\n    const onUp = () => onChange(Direction.up)\n    const onRight = () => onChange(Direction.right)\n    const onLeft = () => onChange(Direction.left)\n    const onDown = () => onChange(Direction.down)\n\n\n    return (\n        <div className=\"manipulation-panel\">\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n            </button>\n            <div>\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n                    <FontAwesomeIcon icon={faArrowUp} />\n                </button>\n                <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n                    <FontAwesomeIcon icon={faArrowDown} />\n                </button>\n            </div>\n            <button className=\"manipulation-btn btn btn-rifht\" onClick={onRight}>\n                <FontAwesomeIcon icon={faArrowRight} />\n            </button>\n        </div>\n    );\n};\n\nexport default ManipulationPanel;","import { useCallback, useEffect, useState } from 'react';\nimport {\n    defaultInterval,\n    defaultDifficulty,\n    initialPosition,\n    initialValues,\n    Delta,\n    Difficulty,\n    Direction,\n    DirectionkeyCodeMap,\n    GameStatus,\n    OppositeDirection,\n} from '../constants';\nimport {\n    initFields,\n    isCollision,\n    isEatingMyself,\n    getFoodPosition,\n} from '../utils';\n\nlet timer = null;\n\nconst unsubscribe = () => {\n    if (!timer) {\n        return;\n    }\n    clearInterval(timer);\n};\n\nconst useSnakeGame = () => {\n    const [fields, setFields] = useState(initialValues);\n    const [body, setBody] = useState([]);\n    const [status, setStatus] = useState(GameStatus.init);\n    const [direction, setDirection] = useState(Direction.up);\n    const [difficulty, setDifficulty] = useState(defaultDifficulty);\n    const [tick, setTick] = useState(0);\n\n    useEffect(() => {\n        setBody([initialPosition]);\n\n        // ゲームの中の時間を管理する\n        const interval = Difficulty[difficulty - 1];\n        timer = setInterval(() => {\n            setTick((tick) => tick + 1);\n        }, interval);\n        return unsubscribe;\n    }, [difficulty]);\n\n    useEffect(() => {\n        if (body.length === 0 || status !== GameStatus.playing) {\n            return;\n        }\n        const canContinue = handleMoving();\n        if (!canContinue) {\n            unsubscribe();\n            setStatus(GameStatus.gameover);\n        }\n    }, [tick]);\n\n    const start = () => setStatus(GameStatus.playing);\n\n    const stop = () => setStatus(GameStatus.suspended);\n\n    const reload = () => {\n        timer = setInterval(() => {\n            setTick((tick) => tick + 1);\n        }, defaultInterval);\n        setStatus(GameStatus.init);\n        setBody([initialPosition]);\n        setDirection(Direction.up);\n        setFields(initFields(fields.length, initialPosition));\n    };\n\n    const updateDirection = useCallback(\n        (newDirection) => {\n            if (status !== GameStatus.playing) {\n                return;\n            }\n            if (OppositeDirection[direction] === newDirection) {\n                return;\n            }\n            setDirection(newDirection);\n        },\n        [direction, status]\n    );\n\n    const updateDifficulty = useCallback(\n        (difficulty) => {\n            if (status !== GameStatus.init) {\n                return;\n            }\n            if (difficulty < 1 || difficulty > Difficulty.length) {\n                return;\n            }\n            setDifficulty(difficulty);\n        },\n        [status]\n    );\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            const newDirection = DirectionkeyCodeMap[e.keyCode];\n            if (!newDirection) {\n                return;\n            }\n            updateDirection(newDirection);\n        };\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [updateDirection]);\n\n    const handleMoving = () => {\n        const { x, y } = body[0];\n        const delta = Delta[direction];\n        const newPosition = {\n            x: x + delta.x,\n            y: y + delta.y,\n        };\n        if (\n            isCollision(fields.length, newPosition) ||\n            isEatingMyself(fields, newPosition)\n        ) {\n            return false;\n        }\n        const newBody = [...body];\n        if (fields[newPosition.y][newPosition.x] !== 'food') {\n            const removingTrack = newBody.pop();\n            fields[removingTrack.y][removingTrack.x] = '';\n        } else {\n            const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n            fields[food.y][food.x] = 'food';\n        }\n        fields[newPosition.y][newPosition.x] = 'snake';\n        newBody.unshift(newPosition);\n\n        setBody(newBody);\n        setFields(fields);\n        return true;\n    };\n    return {\n        body,\n        difficulty,\n        fields,\n        status,\n        start,\n        stop,\n        reload,\n        updateDirection,\n        updateDifficulty,\n    };\n};\n\nexport default useSnakeGame;","\n\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport useSnakeGame from './hooks/useSnakeGame';\n\nfunction App() {\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame()\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDirection}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={stop}\n          onStart={start}\n          onRestart={reload}\n        />\n\n        <ManipulationPanel onChange={updateDifficulty} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}